Hello! Your task is to develop an iOS application for the Roblox game "Grow A Garden". The app's primary purpose is to display live in-game shop stock and send push notifications to the user when specific rare items are available.

### 1. About the Game: "Grow A Garden"

"Grow A Garden" is a popular farming simulation game on the Roblox platform. Players plant seeds, grow them into crops, and sell them. A core gameplay loop involves buying new and rare seeds and gear from the in-game shops, which have a rotating stock that changes periodically (approximately every 5 minutes). This app will help players track the stock without having to be in the game.

### 2. Backend Infrastructure (Already Built)

You will be connecting to a pre-existing backend. You do not need to build one. Here is how it works:

-   It is a Next.js application.
-   A background script runs on the server, logs into Discord as a bot, and listens for messages in specific, dedicated channels (e.g., a `#seeds` channel, a `#gear` channel).
-   Another automated bot posts stock updates into these channels every 5 minutes.
-   Our listener script parses the data from these message embeds and saves the structured data into a single JSON file on the server (`stock-data.json`).
-   There is **one single API endpoint** you need to interact with.

### 3. API Endpoint Details

-   **URL:** `http://<SERVER_IP>:3000/api/stock` (You will need to replace `<SERVER_IP>` with the actual IP address of the server where the backend is running).
-   **Method:** `GET`
-   **Response Body:** The endpoint returns the content of the `stock-data.json` file. The structure is as follows:

```json
{
  "seeds": [
    { "name": "Carrot", "quantity": 17 },
    { "name": "Corn", "quantity": 4 },
    { "name": "Strawberry", "quantity": 3 }
  ],
  "gear": [
    { "name": "Cleaning Spray", "quantity": 4 },
    { "name": "Trowel", "quantity": 2 }
  ],
  "lastUpdated": "2025-06-18T14:20:05.123Z"
}
```

-   If the server has just started and has not received any data yet, the endpoint might return a 404 status with a body like: `{"seeds":[],"gear":[],"lastUpdated":null}`. The app should handle this gracefully.

### 4. Mobile App Requirements (Version 1.0 - iOS)

-   **Platform:** iOS only for this version.
-   **Technology:** Please use **Swift** and **SwiftUI** to build the application for a modern, declarative UI.

#### Key Features:

1.  **Live Stock Display:**
    -   The app should have a clean, intuitive main screen that displays the stock.
    -   Create two distinct sections on the screen: "Seeds" and "Gear".
    -   Under each section, list the items currently in stock, showing the `name` and `quantity` for each.
    -   Display the `lastUpdated` timestamp from the API somewhere visible on the screen so the user knows how fresh the data is.

2.  **Networking:**
    -   The app must poll the `GET /api/stock` endpoint frequently to fetch the latest data. A polling interval of **5 to 10 seconds** is required.
    -   Implement a pull-to-refresh gesture on the main list as a manual way for the user to trigger an update.
    -   Handle network errors gracefully. If the server is unreachable, display a user-friendly error message.

3.  **Notifications (Critical Feature):**
    -   The app must be able to send **local notifications** to the user.
    -   Upon launching for the first time, request notification permissions from the user.
    -   After every successful API call that fetches new stock data, the app must check the `seeds` array.
    -   If any of the following items are found in the `seeds` list, trigger a notification:
        -   "Sugar Apple"
        -   "Ember Lily"
        -   "Beanstalk"
        -   "Cacao"
        -   "Pepper"
    -   The notification should be clear and concise (e.g., "ðŸ”¥ Ember Lily is in stock!").
    -   **Important:** To prevent spam, the user should only be notified **once** for each item per stock rotation. For example, if "Beanstalk" is in stock at 10:00 PM, the user gets one notification. They should not get another notification for "Beanstalk" at 10:01 PM. When the stock rotates at 10:05 PM and "Beanstalk" appears again, they should then receive a new notification. You will need to implement logic to track the state of notified items.

### 5. Final Deliverable

The final output should be a complete and runnable Xcode project for the iOS application. 