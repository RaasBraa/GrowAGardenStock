FRONTEND UPDATE: Per-Item Notification System

ðŸŽ¯ NEW FEATURE: Users can now choose which specific items they want notifications for!

The backend has been updated with a new per-item notification system. Instead of just getting notifications for "rare items", users can now individually toggle notifications for any seed, gear, or egg item.

ðŸ“± NEW API ENDPOINTS

1. UPDATED: POST /api/register-push-token
   - Now accepts user preferences during registration
   - Request body:
   ```json
   {
     "token": "ExponentPushToken[...]",
     "device_type": "ios" | "android",
     "app_version": "1.0.0",
     "preferences": {
       "Carrot": true,
       "Strawberry": false,
       "Watering Can": true,
       "Rare Egg": true
     }
   }
   ```

2. NEW: POST /api/update-push-preferences
   - Update user preferences from settings page
   - Request body:
   ```json
   {
     "token": "ExponentPushToken[...]",
     "preferences": {
       "Carrot": true,
       "Strawberry": false,
       "Watering Can": true,
       "Rare Egg": true
     }
   }
   ```
   - Response includes enabled/disabled item counts

3. NEW: GET /api/update-push-preferences?token=...
   - Get current preferences for a user
   - Returns:
   ```json
   {
     "preferences": {
       "Carrot": true,
       "Strawberry": false
     },
     "lastUpdated": "2024-01-15T12:30:00.000Z"
   }
   ```

4. NEW: GET /api/available-items
   - Get all available items for the settings page
   - Returns:
   ```json
   {
     "items": {
       "seeds": ["Carrot", "Strawberry", "Blueberry", ...],
       "gear": ["Watering Can", "Trowel", "Recall Wrench", ...],
       "eggs": ["Common Egg", "Uncommon Egg", "Rare Egg", ...]
     },
     "timestamp": "2024-01-15T12:30:00.000Z"
   }
   ```

ðŸ”” HOW NOTIFICATIONS WORK NOW

- Each item gets checked individually
- Only users who have that specific item enabled get notified
- If user has no preferences set, they get ALL notifications (backward compatibility)
- Notifications are sent for EVERY item in stock, not just "rare" ones

ðŸ“‹ ALL AVAILABLE ITEMS

SEEDS (16 items):
- Carrot, Strawberry, Blueberry, Tomato, Cauliflower, Watermelon
- Green Apple, Avacado, Banana, Pineapple, Kiwi, Bell Pepper
- Prickly Pear, Loquat, Feijoa, Sugar Apple

GEAR (12 items):
- Watering Can, Trowel, Recall Wrench, Basic Sprinkler, Advanced Sprinkler
- Godly Sprinkler, Tanning Mirror, Master Sprinkler, Cleaning Spray
- Favorite Tool, Harvest Tool, Friendship Pot

EGGS (9 items):
- Common Egg, Uncommon Egg, Rare Egg, Legendary Egg, Mythical Egg
- Bug Egg, Common Summer Egg, Rare Summer Egg, Paradise Summer Egg

ðŸŽ¨ FRONTEND IMPLEMENTATION

1. SETTINGS PAGE:
   - Create toggles for each item in each category
   - Load current preferences on page load
   - Save preferences when user changes them
   - Show enabled/disabled counts

2. REGISTRATION:
   - Include user preferences when registering push token
   - Default all items to true for new users

3. PREFERENCE MANAGEMENT:
   - Use GET /api/update-push-preferences to load current settings
   - Use POST /api/update-push-preferences to save changes
   - Show loading states during save operations

ðŸ“± EXAMPLE FRONTEND CODE

```typescript
// Load available items
const response = await fetch('/api/available-items');
const { items } = await response.json();

// Load user preferences
const prefsResponse = await fetch(`/api/update-push-preferences?token=${userToken}`);
const { preferences } = await prefsResponse.json();

// Save preferences
await fetch('/api/update-push-preferences', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    token: userToken,
    preferences: newPreferences
  })
});
```

ðŸ”„ MIGRATION NOTES

- Existing users will continue to get ALL notifications until they set preferences
- New users should be prompted to set preferences during first app launch
- Consider adding a "Select All" / "Deselect All" option for each category

ðŸš€ READY FOR PRODUCTION

The backend is fully tested and ready. The Discord listener is processing stock updates and sending individual notifications based on user preferences.

Update your frontend to use these new endpoints and create a comprehensive settings page for notification preferences! 